// GENERATED CODE - DO NOT MODIFY BY HAND

part of 'model.dart';

// **************************************************************************
// SqfEntityGenerator
// **************************************************************************

//  These classes was generated by SqfEntity
//  Copyright (c) 2019, All rights reserved. Use of this source code is governed by a
//  Apache license that can be found in the LICENSE file.

//  To use these SqfEntity classes do following:
//  - import model.dart into where to use
//  - start typing ex:Books.select()... (add a few filters with fluent methods)...(add orderBy/orderBydesc if you want)...
//  - and then just put end of filters / or end of only select()  toSingle() / or toList()
//  - you can select one or return List<yourObject> by your filters and orders
//  - also you can batch update or batch delete by using delete/update methods instead of tosingle/tolist methods
//    Enjoy.. Huseyin Tokpunar

// BEGIN TABLES
// Books TABLE
class TableBooks extends SqfEntityTableBase {
  TableBooks() {
    // declare properties of EntityTable
    tableName = 'books';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_unique;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldBase('name', DbType.text),
      SqfEntityFieldBase('chapters', DbType.integer),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableBooks();
  }
}

// Verses TABLE
class TableVerses extends SqfEntityTableBase {
  TableVerses() {
    // declare properties of EntityTable
    tableName = 'verses';
    primaryKeyName = 'id';
    primaryKeyType = PrimaryKeyType.integer_auto_incremental;
    useSoftDeleting = false;
    // when useSoftDeleting is true, creates a field named 'isDeleted' on the table, and set to '1' this field when item deleted (does not hard delete)

    // declare fields
    fields = [
      SqfEntityFieldRelationshipBase(TableBooks.getInstance, DeleteRule.CASCADE,
          fieldName: 'book'),
      SqfEntityFieldBase('chapter', DbType.integer),
      SqfEntityFieldBase('verse', DbType.integer),
      SqfEntityFieldBase('text', DbType.text),
    ];
    super.init();
  }
  static SqfEntityTableBase _instance;
  static SqfEntityTableBase get getInstance {
    return _instance = _instance ?? TableVerses();
  }
}
// END TABLES

// BEGIN SEQUENCES
// identity SEQUENCE
class SequenceIdentitySequence extends SqfEntitySequenceBase {
  SequenceIdentitySequence() {
    sequenceName = 'identity';
    maxValue =
        9223372036854775807; /* optional. default is max int (9.223.372.036.854.775.807) */
    cycle = false; /* optional. default is false; */
    minValue = 0; /* optional. default is 0 */
    incrementBy = 1; /* optional. default is 1 */
    startWith = 0; /* optional. default is 0 */
    super.init();
  }
  static SequenceIdentitySequence _instance;
  static SequenceIdentitySequence get getInstance {
    return _instance = _instance ?? SequenceIdentitySequence();
  }
}
// END SEQUENCES

// BEGIN DATABASE MODEL
class BibleGameModel extends SqfEntityModelProvider {
  BibleGameModel() {
    databaseName = model.databaseName;
    databaseTables = [
      TableBooks.getInstance,
      TableVerses.getInstance,
    ];

    sequences = [
      SequenceIdentitySequence.getInstance,
    ];

    bundledDatabasePath = model
        .bundledDatabasePath; //'assets/sample.db'; // This value is optional. When bundledDatabasePath is empty then EntityBase creats a new database when initializing the database
  }
  Map<String, dynamic> getControllers() {
    final controllers = Map<String, dynamic>();

    return controllers;
  }
}
// END DATABASE MODEL

// BEGIN ENTITIES
// region Books
class Books {
  Books({this.id, this.name, this.chapters}) {
    setDefaultValues();
  }
  Books.withFields(this.name, this.chapters) {
    setDefaultValues();
  }
  Books.withId(this.id, this.name, this.chapters) {
    setDefaultValues();
  }
  Books.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;
    name = o['name'] as String;

    chapters = o['chapters'] as int;

    isSaved = true;
  }
  // FIELDS (Books)
  int id;
  String name;
  int chapters;
  bool isSaved;
  BoolResult saveResult;
  // end FIELDS (Books)

// COLLECTIONS (Books)
  /// get Verses(s) filtered by book=id
  VersesFilterBuilder getVerseses(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return Verses()
        .select(columnsToSelect: columnsToSelect, getIsDeleted: getIsDeleted)
        .book
        .equals(id)
        .and;
  }
// END COLLECTIONS (Books)

  static const bool _softDeleteActivated = false;
  BooksManager __mnBooks;

  BooksManager get _mnBooks {
    return __mnBooks = __mnBooks ?? BooksManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (chapters != null) {
      map['chapters'] = chapters;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (name != null) {
      map['name'] = name;
    }

    if (chapters != null) {
      map['chapters'] = chapters;
    }

// COLLECTIONS (Books)
    if (!forQuery) {
      map['Verseses'] = await getVerseses().toMapList();
    }
// END COLLECTIONS (Books)

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds());
  }

  List<dynamic> toArgs() {
    return [id, name, chapters];
  }

  static Future<List<Books>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Books.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Books>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<Books>();
    try {
      objList = list
          .map((books) => Books.fromMap(books as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Books.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Books>> fromObjectList(Future<List<dynamic>> o) async {
    final data = await o;
    return Books.fromMapList(data);
  }

  static List<Books> fromMapList(List<dynamic> data) {
    final List<Books> objList = List<Books>();
    for (final Map map in data as List<Map>) {
      final obj = Books.fromMap(map as Map<String, dynamic>);
      objList.add(obj);
    }
    return objList;
  }

  /// returns Books by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns Books if exist, otherwise returns null
  Future<Books> getById(int id) async {
    if (id == null) {
      return null;
    }
    Books booksObj;
    final data = await _mnBooks.getById(id);
    if (data.length != 0) {
      booksObj = Books.fromMap(data[0] as Map<String, dynamic>);
    } else {
      booksObj = null;
    }
    return booksObj;
  }

  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0 || !isSaved) {
      id = await _mnBooks.insert(this);
      isSaved = true;
    } else {
      id = await _upsert();
    }
    return id;
  }

  /// saveAs Books. Returns a new Primary Key value of Books

  /// <returns>Returns a new Primary Key value of Books
  Future<int> saveAs() async {
    isSaved = false;

    return save();
  }

  /// saveAll method saves the sent List<Books> as a batch in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<Books> bookses) async {
    final results = _mnBooks.saveAll(
        'INSERT OR REPLACE INTO books (id,  name, chapters)  VALUES (?,?,?)',
        bookses);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    try {
      id = await _mnBooks.rawInsert(
          'INSERT OR REPLACE INTO books (id,  name, chapters)  VALUES (?,?,?)',
          [id, name, chapters]);
      saveResult = BoolResult(
          success: true, successMessage: 'Books id=$id updated successfuly');
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Books Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<Books> bookses) async {
    final results = await _mnBooks.rawInsertAll(
        'INSERT OR REPLACE INTO books (id,  name, chapters)  VALUES (?,?,?)',
        bookses);
    return results;
  }

  /// Deletes Books

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Books invoked (id=$id)');
    var result = BoolResult();
    {
      result = await Verses().select().book.equals(id).delete(hardDelete);
    }
    if (!result.success) {
      return result;
    }
    if (!_softDeleteActivated || hardDelete) {
      return _mnBooks
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnBooks.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  //private BooksFilterBuilder _Select;
  BooksFilterBuilder select({List<String> columnsToSelect, bool getIsDeleted}) {
    return BooksFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  BooksFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return BooksFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void setDefaultValues() {
    isSaved = false;
  }
  // END METHODS
  // CUSTOM CODES
  /*
    you must define customCode property of your SqfEntityTable constant for ex:
    const tablePerson = SqfEntityTable(
    tableName: 'person',
    primaryKeyName: 'id',
    primaryKeyType: PrimaryKeyType.integer_auto_incremental,
    fields: [
      SqfEntityField('firstName', DbType.text),
      SqfEntityField('lastName', DbType.text),
    ],
    customCode: '''
     String fullName()
     { 
       return '$firstName $lastName';
     }
    ''');
   */
  // END CUSTOM CODES
}
// endregion books

// region BooksField
class BooksField extends SearchCriteria {
  BooksField(this.booksFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  BooksFilterBuilder booksFB;

  BooksField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  BooksFilterBuilder equals(var pValue) {
    param.expression = '=';
    booksFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, booksFB.parameters, param, SqlSyntax.EQuals,
            booksFB._addedBlocks)
        : setCriteria(pValue, booksFB.parameters, param, SqlSyntax.NotEQuals,
            booksFB._addedBlocks);
    _waitingNot = '';
    booksFB._addedBlocks.needEndBlock[booksFB._blockIndex] =
        booksFB._addedBlocks.retVal;
    return booksFB;
  }

  BooksFilterBuilder equalsOrNull(var pValue) {
    param.expression = '=';
    booksFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, booksFB.parameters, param, SqlSyntax.EQualsOrNull,
            booksFB._addedBlocks)
        : setCriteria(pValue, booksFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, booksFB._addedBlocks);
    _waitingNot = '';
    booksFB._addedBlocks.needEndBlock[booksFB._blockIndex] =
        booksFB._addedBlocks.retVal;
    return booksFB;
  }

  BooksFilterBuilder isNull() {
    booksFB._addedBlocks = setCriteria(
        0,
        booksFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        booksFB._addedBlocks);
    _waitingNot = '';
    booksFB._addedBlocks.needEndBlock[booksFB._blockIndex] =
        booksFB._addedBlocks.retVal;
    return booksFB;
  }

  BooksFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      booksFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          booksFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          booksFB._addedBlocks);
      _waitingNot = '';
      booksFB._addedBlocks.needEndBlock[booksFB._blockIndex] =
          booksFB._addedBlocks.retVal;
    }
    return booksFB;
  }

  BooksFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      booksFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          booksFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          booksFB._addedBlocks);
      _waitingNot = '';
      booksFB._addedBlocks.needEndBlock[booksFB._blockIndex] =
          booksFB._addedBlocks.retVal;
      booksFB._addedBlocks.needEndBlock[booksFB._blockIndex] =
          booksFB._addedBlocks.retVal;
    }
    return booksFB;
  }

  BooksFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      booksFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          booksFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          booksFB._addedBlocks);
      _waitingNot = '';
      booksFB._addedBlocks.needEndBlock[booksFB._blockIndex] =
          booksFB._addedBlocks.retVal;
    }
    return booksFB;
  }

  BooksFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      booksFB._addedBlocks = setCriteria(
          pFirst,
          booksFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          booksFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        booksFB._addedBlocks = setCriteria(pFirst, booksFB.parameters, param,
            SqlSyntax.LessThan, booksFB._addedBlocks);
      } else {
        booksFB._addedBlocks = setCriteria(pFirst, booksFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, booksFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        booksFB._addedBlocks = setCriteria(pLast, booksFB.parameters, param,
            SqlSyntax.GreaterThan, booksFB._addedBlocks);
      } else {
        booksFB._addedBlocks = setCriteria(pLast, booksFB.parameters, param,
            SqlSyntax.LessThanOrEquals, booksFB._addedBlocks);
      }
    }
    _waitingNot = '';
    booksFB._addedBlocks.needEndBlock[booksFB._blockIndex] =
        booksFB._addedBlocks.retVal;
    return booksFB;
  }

  BooksFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    booksFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, booksFB.parameters, param, SqlSyntax.GreaterThan,
            booksFB._addedBlocks)
        : setCriteria(pValue, booksFB.parameters, param,
            SqlSyntax.LessThanOrEquals, booksFB._addedBlocks);
    _waitingNot = '';
    booksFB._addedBlocks.needEndBlock[booksFB._blockIndex] =
        booksFB._addedBlocks.retVal;
    return booksFB;
  }

  BooksFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    booksFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, booksFB.parameters, param, SqlSyntax.LessThan,
            booksFB._addedBlocks)
        : setCriteria(pValue, booksFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, booksFB._addedBlocks);
    _waitingNot = '';
    booksFB._addedBlocks.needEndBlock[booksFB._blockIndex] =
        booksFB._addedBlocks.retVal;
    return booksFB;
  }

  BooksFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    booksFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, booksFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, booksFB._addedBlocks)
        : setCriteria(pValue, booksFB.parameters, param, SqlSyntax.LessThan,
            booksFB._addedBlocks);
    _waitingNot = '';
    booksFB._addedBlocks.needEndBlock[booksFB._blockIndex] =
        booksFB._addedBlocks.retVal;
    return booksFB;
  }

  BooksFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    booksFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, booksFB.parameters, param,
            SqlSyntax.LessThanOrEquals, booksFB._addedBlocks)
        : setCriteria(pValue, booksFB.parameters, param, SqlSyntax.GreaterThan,
            booksFB._addedBlocks);
    _waitingNot = '';
    booksFB._addedBlocks.needEndBlock[booksFB._blockIndex] =
        booksFB._addedBlocks.retVal;
    return booksFB;
  }

  BooksFilterBuilder inValues(var pValue) {
    booksFB._addedBlocks = setCriteria(
        pValue,
        booksFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        booksFB._addedBlocks);
    _waitingNot = '';
    booksFB._addedBlocks.needEndBlock[booksFB._blockIndex] =
        booksFB._addedBlocks.retVal;
    return booksFB;
  }
}
// endregion BooksField

// region BooksFilterBuilder
class BooksFilterBuilder extends SearchCriteria {
  BooksFilterBuilder(Books obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Books _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  BooksFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  BooksFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  BooksFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  BooksFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  BooksFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  BooksFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  BooksFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  BooksFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  BooksFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  BooksFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  BooksField setField(BooksField field, String colName, DbType dbtype) {
    return BooksField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  BooksField _id;
  BooksField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  BooksField _name;
  BooksField get name {
    return _name = setField(_name, 'name', DbType.text);
  }

  BooksField _chapters;
  BooksField get chapters {
    return _chapters = setField(_chapters, 'chapters', DbType.integer);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Books._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Books> batch by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (Books._softDeleteActivated && !hardDelete) {
      r = await _obj._mnBooks.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnBooks.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from books ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnBooks.updateBatch(qparams, values);
  }

  /// This method always returns BooksObj if exist, otherwise returns null
  /// <returns>List<Books>
  Future<Books> toSingle([VoidCallback books(Books o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnBooks.toList(qparams);
    final data = await objFuture;
    Books retVal;
    if (data.isNotEmpty) {
      retVal = Books.fromMap(data[0] as Map<String, dynamic>);
    } else {
      retVal = null;
    }
    if (books != null) {
      books(retVal);
    }
    return retVal;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback booksCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final booksesFuture = await _obj._mnBooks.toList(qparams);
    final int count = booksesFuture[0]['CNT'] as int;
    if (booksCount != null) {
      booksCount(count);
    }
    return count;
  }

  /// This method always returns List<Books>.
  /// <returns>List<Books>
  Future<List<Books>> toList([VoidCallback booksList(List<Books> o)]) async {
    final data = await toMapList();
    final List<Books> booksesData = Books.fromMapList(data);
    if (booksList != null) booksList(booksesData);
    return booksesData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap());
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds());
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnBooks.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Books>>
  Future<List<DropdownMenuItem<Books>>> toDropDownMenu(String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<Books>> o)]) async {
    _buildParameters();
    final booksesFuture = _obj._mnBooks.toList(qparams);

    final data = await booksesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Books>> items = List()
      ..add(DropdownMenuItem(
        value: Books(),
        child: Text('Select Books'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Books.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final booksesFuture = _obj._mnBooks.toList(qparams);

    final data = await booksesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Books'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnBooks.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnBooks.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Books.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnBooks.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion BooksFilterBuilder

// region BooksFields
class BooksFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fName;
  static TableField get name {
    return _fName = _fName ?? SqlSyntax.setField(_fName, 'name', DbType.text);
  }

  static TableField _fChapters;
  static TableField get chapters {
    return _fChapters = _fChapters ??
        SqlSyntax.setField(_fChapters, 'chapters', DbType.integer);
  }
}
// endregion BooksFields

//region BooksManager
class BooksManager extends SqfEntityProvider {
  BooksManager()
      : super(BibleGameModel(), tableName: _tableName, colId: _colId);
  static String _tableName = 'books';
  static String _colId = 'id';
}

//endregion BooksManager
// region Verses
class Verses {
  Verses({this.id, this.book, this.chapter, this.verse, this.text}) {
    setDefaultValues();
  }
  Verses.withFields(this.book, this.chapter, this.verse, this.text) {
    setDefaultValues();
  }
  Verses.withId(this.id, this.book, this.chapter, this.verse, this.text) {
    setDefaultValues();
  }
  Verses.fromMap(Map<String, dynamic> o) {
    id = o['id'] as int;
    book = o['book'] as int;

    chapter = o['chapter'] as int;

    verse = o['verse'] as int;

    text = o['text'] as String;
  }
  // FIELDS (Verses)
  int id;
  int book;
  int chapter;
  int verse;
  String text;

  BoolResult saveResult;
  // end FIELDS (Verses)

// RELATIONSHIPS (Verses)
  /// get Books By Book
  Future<Books> getBooks([VoidCallback books(Books o)]) async {
    final _obj = await Books().getById(book);
    if (books != null) {
      books(_obj);
    }
    return _obj;
  }
  // END RELATIONSHIPS (Verses)

  static const bool _softDeleteActivated = false;
  VersesManager __mnVerses;

  VersesManager get _mnVerses {
    return __mnVerses = __mnVerses ?? VersesManager();
  }

  // METHODS
  Map<String, dynamic> toMap({bool forQuery = false, bool forJson = false}) {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (book != null) {
      map['book'] = book;
    }

    if (chapter != null) {
      map['chapter'] = chapter;
    }

    if (verse != null) {
      map['verse'] = verse;
    }

    if (text != null) {
      map['text'] = text;
    }

    return map;
  }

  Future<Map<String, dynamic>> toMapWithChilds(
      [bool forQuery = false, bool forJson = false]) async {
    final map = Map<String, dynamic>();
    if (id != null) {
      map['id'] = id;
    }
    if (book != null) {
      map['book'] = book;
    }

    if (chapter != null) {
      map['chapter'] = chapter;
    }

    if (verse != null) {
      map['verse'] = verse;
    }

    if (text != null) {
      map['text'] = text;
    }

    return map;
  }

  /// This method always returns Json String
  String toJson() {
    return json.encode(toMap(forJson: true));
  }

  /// This method always returns Json String
  Future<String> toJsonWithChilds() async {
    return json.encode(await toMapWithChilds());
  }

  List<dynamic> toArgs() {
    return [id, book, chapter, verse, text];
  }

  static Future<List<Verses>> fromWebUrl(String url) async {
    try {
      final response = await http.get(url);
      return await fromJson(response.body);
    } catch (e) {
      print('SQFENTITY ERROR Verses.fromWebUrl: ErrorMessage: ${e.toString()}');
      return null;
    }
  }

  static Future<List<Verses>> fromJson(String jsonBody) async {
    final Iterable list = await json.decode(jsonBody) as Iterable;
    var objList = List<Verses>();
    try {
      objList = list
          .map((verses) => Verses.fromMap(verses as Map<String, dynamic>))
          .toList();
    } catch (e) {
      print('SQFENTITY ERROR Verses.fromJson: ErrorMessage: ${e.toString()}');
    }
    return objList;
  }

  static Future<List<Verses>> fromObjectList(Future<List<dynamic>> o) async {
    final data = await o;
    return Verses.fromMapList(data);
  }

  static List<Verses> fromMapList(List<dynamic> data) {
    final List<Verses> objList = List<Verses>();
    for (final Map map in data as List<Map>) {
      final obj = Verses.fromMap(map as Map<String, dynamic>);
      objList.add(obj);
    }
    return objList;
  }

  /// returns Verses by ID if exist, otherwise returns null
  /// <param name='id'>Primary Key Value</param>
  /// <returns>returns Verses if exist, otherwise returns null
  Future<Verses> getById(int id) async {
    if (id == null) {
      return null;
    }
    Verses versesObj;
    final data = await _mnVerses.getById(id);
    if (data.length != 0) {
      versesObj = Verses.fromMap(data[0] as Map<String, dynamic>);
    } else {
      versesObj = null;
    }
    return versesObj;
  }

  /// Saves the object. If the id field is null, saves as a new record and returns new id, if id is not null then updates record

  /// <returns>Returns id
  Future<int> save() async {
    if (id == null || id == 0) {
      id = await _mnVerses.insert(this);
    } else {
      id = await _upsert();
    }
    return id;
  }

  /// saveAs Verses. Returns a new Primary Key value of Verses

  /// <returns>Returns a new Primary Key value of Verses
  Future<int> saveAs() async {
    id = null;
    return save();
  }

  /// saveAll method saves the sent List<Verses> as a batch in one transaction
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> saveAll(List<Verses> verseses) async {
    final results = _mnVerses.saveAll(
        'INSERT OR REPLACE INTO verses (id,  book, chapter, verse, text)  VALUES (?,?,?,?,?)',
        verseses);
    return results;
  }

  /// Updates if the record exists, otherwise adds a new row

  /// <returns>Returns id
  Future<int> _upsert() async {
    try {
      id = await _mnVerses.rawInsert(
          'INSERT OR REPLACE INTO verses (id,  book, chapter, verse, text)  VALUES (?,?,?,?,?)',
          [id, book, chapter, verse, text]);
      saveResult = BoolResult(
          success: true, successMessage: 'Verses id=$id updated successfuly');
      return id;
    } catch (e) {
      saveResult = BoolResult(
          success: false,
          errorMessage: 'Verses Save failed. Error: ${e.toString()}');
      return 0;
    }
  }

  /// inserts or replaces the sent List<Todo> as a batch in one transaction.
  /// upsertAll() method is faster then saveAll() method. upsertAll() should be used when you are sure that the primary key is greater than zero
  /// Returns a <List<BoolResult>>
  Future<List<BoolResult>> upsertAll(List<Verses> verseses) async {
    final results = await _mnVerses.rawInsertAll(
        'INSERT OR REPLACE INTO verses (id,  book, chapter, verse, text)  VALUES (?,?,?,?,?)',
        verseses);
    return results;
  }

  /// Deletes Verses

  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    print('SQFENTITIY: delete Verses invoked (id=$id)');
    if (!_softDeleteActivated || hardDelete) {
      return _mnVerses
          .delete(QueryParams(whereString: 'id=?', whereArguments: [id]));
    } else {
      return _mnVerses.updateBatch(
          QueryParams(whereString: 'id=?', whereArguments: [id]),
          {'isDeleted': 1});
    }
  }

  //private VersesFilterBuilder _Select;
  VersesFilterBuilder select(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return VersesFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect;
  }

  VersesFilterBuilder distinct(
      {List<String> columnsToSelect, bool getIsDeleted}) {
    return VersesFilterBuilder(this)
      .._getIsDeleted = getIsDeleted == true
      ..qparams.selectColumns = columnsToSelect
      ..qparams.distinct = true;
  }

  void setDefaultValues() {}
  // END METHODS
  // CUSTOM CODES
  /*
    you must define customCode property of your SqfEntityTable constant for ex:
    const tablePerson = SqfEntityTable(
    tableName: 'person',
    primaryKeyName: 'id',
    primaryKeyType: PrimaryKeyType.integer_auto_incremental,
    fields: [
      SqfEntityField('firstName', DbType.text),
      SqfEntityField('lastName', DbType.text),
    ],
    customCode: '''
     String fullName()
     { 
       return '$firstName $lastName';
     }
    ''');
   */
  // END CUSTOM CODES
}
// endregion verses

// region VersesField
class VersesField extends SearchCriteria {
  VersesField(this.versesFB) {
    param = DbParameter();
  }
  DbParameter param;
  String _waitingNot = '';
  VersesFilterBuilder versesFB;

  VersesField get not {
    _waitingNot = ' NOT ';
    return this;
  }

  VersesFilterBuilder equals(var pValue) {
    param.expression = '=';
    versesFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, versesFB.parameters, param, SqlSyntax.EQuals,
            versesFB._addedBlocks)
        : setCriteria(pValue, versesFB.parameters, param, SqlSyntax.NotEQuals,
            versesFB._addedBlocks);
    _waitingNot = '';
    versesFB._addedBlocks.needEndBlock[versesFB._blockIndex] =
        versesFB._addedBlocks.retVal;
    return versesFB;
  }

  VersesFilterBuilder equalsOrNull(var pValue) {
    param.expression = '=';
    versesFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, versesFB.parameters, param,
            SqlSyntax.EQualsOrNull, versesFB._addedBlocks)
        : setCriteria(pValue, versesFB.parameters, param,
            SqlSyntax.NotEQualsOrNull, versesFB._addedBlocks);
    _waitingNot = '';
    versesFB._addedBlocks.needEndBlock[versesFB._blockIndex] =
        versesFB._addedBlocks.retVal;
    return versesFB;
  }

  VersesFilterBuilder isNull() {
    versesFB._addedBlocks = setCriteria(
        0,
        versesFB.parameters,
        param,
        SqlSyntax.IsNULL.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        versesFB._addedBlocks);
    _waitingNot = '';
    versesFB._addedBlocks.needEndBlock[versesFB._blockIndex] =
        versesFB._addedBlocks.retVal;
    return versesFB;
  }

  VersesFilterBuilder contains(dynamic pValue) {
    if (pValue != null) {
      versesFB._addedBlocks = setCriteria(
          '%${pValue.toString()}%',
          versesFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          versesFB._addedBlocks);
      _waitingNot = '';
      versesFB._addedBlocks.needEndBlock[versesFB._blockIndex] =
          versesFB._addedBlocks.retVal;
    }
    return versesFB;
  }

  VersesFilterBuilder startsWith(dynamic pValue) {
    if (pValue != null) {
      versesFB._addedBlocks = setCriteria(
          '${pValue.toString()}%',
          versesFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          versesFB._addedBlocks);
      _waitingNot = '';
      versesFB._addedBlocks.needEndBlock[versesFB._blockIndex] =
          versesFB._addedBlocks.retVal;
      versesFB._addedBlocks.needEndBlock[versesFB._blockIndex] =
          versesFB._addedBlocks.retVal;
    }
    return versesFB;
  }

  VersesFilterBuilder endsWith(dynamic pValue) {
    if (pValue != null) {
      versesFB._addedBlocks = setCriteria(
          '%${pValue.toString()}',
          versesFB.parameters,
          param,
          SqlSyntax.Contains.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          versesFB._addedBlocks);
      _waitingNot = '';
      versesFB._addedBlocks.needEndBlock[versesFB._blockIndex] =
          versesFB._addedBlocks.retVal;
    }
    return versesFB;
  }

  VersesFilterBuilder between(dynamic pFirst, dynamic pLast) {
    if (pFirst != null && pLast != null) {
      versesFB._addedBlocks = setCriteria(
          pFirst,
          versesFB.parameters,
          param,
          SqlSyntax.Between.replaceAll(SqlSyntax.notKeyword, _waitingNot),
          versesFB._addedBlocks,
          pLast);
    } else if (pFirst != null) {
      if (_waitingNot != '') {
        versesFB._addedBlocks = setCriteria(pFirst, versesFB.parameters, param,
            SqlSyntax.LessThan, versesFB._addedBlocks);
      } else {
        versesFB._addedBlocks = setCriteria(pFirst, versesFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, versesFB._addedBlocks);
      }
    } else if (pLast != null) {
      if (_waitingNot != '') {
        versesFB._addedBlocks = setCriteria(pLast, versesFB.parameters, param,
            SqlSyntax.GreaterThan, versesFB._addedBlocks);
      } else {
        versesFB._addedBlocks = setCriteria(pLast, versesFB.parameters, param,
            SqlSyntax.LessThanOrEquals, versesFB._addedBlocks);
      }
    }
    _waitingNot = '';
    versesFB._addedBlocks.needEndBlock[versesFB._blockIndex] =
        versesFB._addedBlocks.retVal;
    return versesFB;
  }

  VersesFilterBuilder greaterThan(dynamic pValue) {
    param.expression = '>';
    versesFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, versesFB.parameters, param, SqlSyntax.GreaterThan,
            versesFB._addedBlocks)
        : setCriteria(pValue, versesFB.parameters, param,
            SqlSyntax.LessThanOrEquals, versesFB._addedBlocks);
    _waitingNot = '';
    versesFB._addedBlocks.needEndBlock[versesFB._blockIndex] =
        versesFB._addedBlocks.retVal;
    return versesFB;
  }

  VersesFilterBuilder lessThan(dynamic pValue) {
    param.expression = '<';
    versesFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, versesFB.parameters, param, SqlSyntax.LessThan,
            versesFB._addedBlocks)
        : setCriteria(pValue, versesFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, versesFB._addedBlocks);
    _waitingNot = '';
    versesFB._addedBlocks.needEndBlock[versesFB._blockIndex] =
        versesFB._addedBlocks.retVal;
    return versesFB;
  }

  VersesFilterBuilder greaterThanOrEquals(dynamic pValue) {
    param.expression = '>=';
    versesFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, versesFB.parameters, param,
            SqlSyntax.GreaterThanOrEquals, versesFB._addedBlocks)
        : setCriteria(pValue, versesFB.parameters, param, SqlSyntax.LessThan,
            versesFB._addedBlocks);
    _waitingNot = '';
    versesFB._addedBlocks.needEndBlock[versesFB._blockIndex] =
        versesFB._addedBlocks.retVal;
    return versesFB;
  }

  VersesFilterBuilder lessThanOrEquals(dynamic pValue) {
    param.expression = '<=';
    versesFB._addedBlocks = _waitingNot == ''
        ? setCriteria(pValue, versesFB.parameters, param,
            SqlSyntax.LessThanOrEquals, versesFB._addedBlocks)
        : setCriteria(pValue, versesFB.parameters, param, SqlSyntax.GreaterThan,
            versesFB._addedBlocks);
    _waitingNot = '';
    versesFB._addedBlocks.needEndBlock[versesFB._blockIndex] =
        versesFB._addedBlocks.retVal;
    return versesFB;
  }

  VersesFilterBuilder inValues(var pValue) {
    versesFB._addedBlocks = setCriteria(
        pValue,
        versesFB.parameters,
        param,
        SqlSyntax.IN.replaceAll(SqlSyntax.notKeyword, _waitingNot),
        versesFB._addedBlocks);
    _waitingNot = '';
    versesFB._addedBlocks.needEndBlock[versesFB._blockIndex] =
        versesFB._addedBlocks.retVal;
    return versesFB;
  }
}
// endregion VersesField

// region VersesFilterBuilder
class VersesFilterBuilder extends SearchCriteria {
  VersesFilterBuilder(Verses obj) {
    whereString = '';
    qparams = QueryParams();
    parameters = List<DbParameter>();
    orderByList = List<String>();
    groupByList = List<String>();
    _addedBlocks = AddedBlocks(List<bool>(), List<bool>());
    _addedBlocks.needEndBlock.add(false);
    _addedBlocks.waitingStartBlock.add(false);
    _pagesize = 0;
    _page = 0;
    _obj = obj;
  }
  AddedBlocks _addedBlocks;
  int _blockIndex = 0;
  List<DbParameter> parameters;
  List<String> orderByList;
  Verses _obj;
  QueryParams qparams;
  int _pagesize;
  int _page;

  /// put the sql keyword 'AND'
  VersesFilterBuilder get and {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' AND ';
    }
    return this;
  }

  /// put the sql keyword 'OR'
  VersesFilterBuilder get or {
    if (parameters.isNotEmpty) {
      parameters[parameters.length - 1].wOperator = ' OR ';
    }
    return this;
  }

  /// open parentheses
  VersesFilterBuilder get startBlock {
    _addedBlocks.waitingStartBlock.add(true);
    _addedBlocks.needEndBlock.add(false);
    _blockIndex++;
    if (_blockIndex > 1) _addedBlocks.needEndBlock[_blockIndex - 1] = true;
    return this;
  }

  /// String whereCriteria, write raw query without 'where' keyword. Like this: 'field1 like 'test%' and field2 = 3'
  VersesFilterBuilder where(String whereCriteria) {
    if (whereCriteria != null && whereCriteria != '') {
      final DbParameter param = DbParameter();
      _addedBlocks =
          setCriteria(0, parameters, param, '($whereCriteria)', _addedBlocks);
      _addedBlocks.needEndBlock[_blockIndex] = _addedBlocks.retVal;
    }
    return this;
  }

  /// page = page number,
  ///
  /// pagesize = row(s) per page
  VersesFilterBuilder page(int page, int pagesize) {
    if (page > 0) _page = page;
    if (pagesize > 0) _pagesize = pagesize;
    return this;
  }

  /// int count = LIMIT
  VersesFilterBuilder top(int count) {
    if (count > 0) {
      _pagesize = count;
    }
    return this;
  }

  /// close parentheses
  VersesFilterBuilder get endBlock {
    if (_addedBlocks.needEndBlock[_blockIndex]) {
      parameters[parameters.length - 1].whereString += ' ) ';
    }
    _addedBlocks.needEndBlock.removeAt(_blockIndex);
    _addedBlocks.waitingStartBlock.removeAt(_blockIndex);
    _blockIndex--;
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='name, date'
  ///
  /// Example 2: argFields = ['name', 'date']
  VersesFilterBuilder orderBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add(argFields);
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  VersesFilterBuilder orderByDesc(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        orderByList.add('$argFields desc ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') orderByList.add(' $s desc ');
        }
      }
    }
    return this;
  }

  /// argFields might be String or List<String>.
  ///
  /// Example 1: argFields='field1, field2'
  ///
  /// Example 2: argFields = ['field1', 'field2']
  VersesFilterBuilder groupBy(var argFields) {
    if (argFields != null) {
      if (argFields is String) {
        groupByList.add(' $argFields ');
      } else {
        for (String s in argFields) {
          if (s != null && s != '') groupByList.add(' $s ');
        }
      }
    }
    return this;
  }

  VersesField setField(VersesField field, String colName, DbType dbtype) {
    return VersesField(this)
      ..param = DbParameter(
          dbType: dbtype,
          columnName: colName,
          wStartBlock: _addedBlocks.waitingStartBlock[_blockIndex]);
  }

  VersesField _id;
  VersesField get id {
    return _id = setField(_id, 'id', DbType.integer);
  }

  VersesField _book;
  VersesField get book {
    return _book = setField(_book, 'book', DbType.integer);
  }

  VersesField _chapter;
  VersesField get chapter {
    return _chapter = setField(_chapter, 'chapter', DbType.integer);
  }

  VersesField _verse;
  VersesField get verse {
    return _verse = setField(_verse, 'verse', DbType.integer);
  }

  VersesField _text;
  VersesField get text {
    return _text = setField(_text, 'text', DbType.text);
  }

  bool _getIsDeleted;

  void _buildParameters() {
    if (_page > 0 && _pagesize > 0) {
      qparams
        ..limit = _pagesize
        ..offset = (_page - 1) * _pagesize;
    } else {
      qparams
        ..limit = _pagesize
        ..offset = _page;
    }
    for (DbParameter param in parameters) {
      if (param.columnName != null) {
        if (param.value is List) {
          param.value = param.value
              .toString()
              .replaceAll('[', '')
              .replaceAll(']', '')
              .toString();
          whereString += param.whereString
              .replaceAll('{field}', param.columnName)
              .replaceAll('?', param.value.toString());
          param.value = null;
        } else {
          whereString +=
              param.whereString.replaceAll('{field}', param.columnName);
        }
        if (!param.whereString.contains('?')) {
        } else {
          switch (param.dbType) {
            case DbType.bool:
              param.value =
                  param.value == null ? null : param.value == true ? 1 : 0;
              param.value2 =
                  param.value2 == null ? null : param.value2 == true ? 1 : 0;
              break;
            case DbType.date:
            case DbType.datetime:
              param.value = param.value == null
                  ? null
                  : (param.value as DateTime).millisecondsSinceEpoch;
              param.value2 = param.value2 == null
                  ? null
                  : (param.value2 as DateTime).millisecondsSinceEpoch;
              break;
            default:
          }
          if (param.value != null) {
            whereArguments.add(param.value);
          }
          if (param.value2 != null) {
            whereArguments.add(param.value2);
          }
        }
      } else {
        whereString += param.whereString;
      }
    }
    if (Verses._softDeleteActivated) {
      if (whereString != '') {
        whereString =
            '${!_getIsDeleted ? 'ifnull(isDeleted,0)=0 AND' : ''} ($whereString)';
      } else if (!_getIsDeleted) {
        whereString = 'ifnull(isDeleted,0)=0';
      }
    }

    if (whereString != '') {
      qparams.whereString = whereString;
    }
    qparams
      ..whereArguments = whereArguments
      ..groupBy = groupByList.join(',')
      ..orderBy = orderByList.join(',');
  }

  /// Deletes List<Verses> batch by query
  ///
  /// <returns>BoolResult res.success=Deleted, not res.success=Can not deleted
  Future<BoolResult> delete([bool hardDelete = false]) async {
    _buildParameters();
    var r = BoolResult();
    if (Verses._softDeleteActivated && !hardDelete) {
      r = await _obj._mnVerses.updateBatch(qparams, {'isDeleted': 1});
    } else {
      r = await _obj._mnVerses.delete(qparams);
    }
    return r;
  }

  /// using:
  ///
  /// update({'fieldName': Value})
  ///
  /// fieldName must be String. Value is dynamic, it can be any of the (int, bool, String.. )
  Future<BoolResult> update(Map<String, dynamic> values) {
    _buildParameters();
    if (qparams.limit > 0 || qparams.offset > 0) {
      qparams.whereString =
          'id IN (SELECT id from verses ${qparams.whereString.isNotEmpty ? 'WHERE ${qparams.whereString}' : ''}${qparams.limit > 0 ? ' LIMIT ${qparams.limit}' : ''}${qparams.offset > 0 ? ' OFFSET ${qparams.offset}' : ''})';
    }
    return _obj._mnVerses.updateBatch(qparams, values);
  }

  /// This method always returns VersesObj if exist, otherwise returns null
  /// <returns>List<Verses>
  Future<Verses> toSingle([VoidCallback verses(Verses o)]) async {
    _pagesize = 1;
    _buildParameters();
    final objFuture = _obj._mnVerses.toList(qparams);
    final data = await objFuture;
    Verses retVal;
    if (data.isNotEmpty) {
      retVal = Verses.fromMap(data[0] as Map<String, dynamic>);
    } else {
      retVal = null;
    }
    if (verses != null) {
      verses(retVal);
    }
    return retVal;
  }

  /// This method always returns int.
  ///
  /// <returns>int
  Future<int> toCount([VoidCallback versesCount(int c)]) async {
    _buildParameters();
    qparams.selectColumns = ['COUNT(1) AS CNT'];
    final versesesFuture = await _obj._mnVerses.toList(qparams);
    final int count = versesesFuture[0]['CNT'] as int;
    if (versesCount != null) {
      versesCount(count);
    }
    return count;
  }

  /// This method always returns List<Verses>.
  /// <returns>List<Verses>
  Future<List<Verses>> toList([VoidCallback versesList(List<Verses> o)]) async {
    final data = await toMapList();
    final List<Verses> versesesData = Verses.fromMapList(data);
    if (versesList != null) versesList(versesesData);
    return versesesData;
  }

  /// This method always returns Json String
  Future<String> toJson() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(o.toMap());
    }
    return json.encode(list);
  }

  /// This method always returns Json String.
  Future<String> toJsonWithChilds() async {
    final list = List<dynamic>();
    final data = await toList();
    for (var o in data) {
      list.add(await o.toMapWithChilds());
    }
    return json.encode(list);
  }

  /// This method always returns List<dynamic>.
  ///
  /// <returns>List<dynamic>
  Future<List<dynamic>> toMapList() async {
    _buildParameters();
    return await _obj._mnVerses.toList(qparams);
  }

  /// Returns List<DropdownMenuItem<Verses>>
  Future<List<DropdownMenuItem<Verses>>> toDropDownMenu(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<Verses>> o)]) async {
    _buildParameters();
    final versesesFuture = _obj._mnVerses.toList(qparams);

    final data = await versesesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<Verses>> items = List()
      ..add(DropdownMenuItem(
        value: Verses(),
        child: Text('Select Verses'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: Verses.fromMap(data[i] as Map<String, dynamic>),
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// Returns List<DropdownMenuItem<int>>
  Future<List<DropdownMenuItem<int>>> toDropDownMenuInt(
      String displayTextColumn,
      [VoidCallback dropDownMenu(List<DropdownMenuItem<int>> o)]) async {
    _buildParameters();
    qparams.selectColumns = ['id', displayTextColumn];
    final versesesFuture = _obj._mnVerses.toList(qparams);

    final data = await versesesFuture;
    final int count = data.length;
    final List<DropdownMenuItem<int>> items = List()
      ..add(DropdownMenuItem(
        value: 0,
        child: Text('Select Verses'),
      ));
    for (int i = 0; i < count; i++) {
      items.add(
        DropdownMenuItem(
          value: data[i]['id'] as int,
          child: Text(data[i][displayTextColumn].toString()),
        ),
      );
    }
    if (dropDownMenu != null) {
      dropDownMenu(items);
    }
    return items;
  }

  /// This method always returns Primary Key List<int>.
  /// <returns>List<int>
  Future<List<int>> toListPrimaryKey([bool buildParameters = true]) async {
    if (buildParameters) _buildParameters();
    final List<int> idData = List<int>();
    qparams.selectColumns = ['id'];
    final idFuture = await _obj._mnVerses.toList(qparams);

    final int count = idFuture.length;
    for (int i = 0; i < count; i++) {
      idData.add(idFuture[i]['id'] as int);
    }
    return idData;
  }

  /// Returns List<dynamic> for selected columns. Use this method for 'groupBy' with min,max,avg..
  ///
  /// Sample usage: (see EXAMPLE 4.2 at https://github.com/hhtokpinar/sqfEntity#group-by)
  Future<List<dynamic>> toListObject(
      [VoidCallback listObject(List<dynamic> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnVerses.toList(qparams);

    final List<dynamic> objectsData = List<dynamic>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i]);
    }
    if (listObject != null) {
      listObject(objectsData);
    }
    return objectsData;
  }

  /// Returns List<String> for selected first column
  ///
  /// Sample usage: await Verses.select(columnsToSelect: ['columnName']).toListString()
  Future<List<String>> toListString(
      [VoidCallback listString(List<String> o)]) async {
    _buildParameters();

    final objectFuture = _obj._mnVerses.toList(qparams);

    final List<String> objectsData = List<String>();
    final data = await objectFuture;
    final int count = data.length;
    for (int i = 0; i < count; i++) {
      objectsData.add(data[i][qparams.selectColumns[0]].toString());
    }
    if (listString != null) {
      listString(objectsData);
    }
    return objectsData;
  }
}
// endregion VersesFilterBuilder

// region VersesFields
class VersesFields {
  static TableField _fId;
  static TableField get id {
    return _fId = _fId ?? SqlSyntax.setField(_fId, 'id', DbType.integer);
  }

  static TableField _fBook;
  static TableField get book {
    return _fBook =
        _fBook ?? SqlSyntax.setField(_fBook, 'book', DbType.integer);
  }

  static TableField _fChapter;
  static TableField get chapter {
    return _fChapter =
        _fChapter ?? SqlSyntax.setField(_fChapter, 'chapter', DbType.integer);
  }

  static TableField _fVerse;
  static TableField get verse {
    return _fVerse =
        _fVerse ?? SqlSyntax.setField(_fVerse, 'verse', DbType.integer);
  }

  static TableField _fText;
  static TableField get text {
    return _fText = _fText ?? SqlSyntax.setField(_fText, 'text', DbType.text);
  }
}
// endregion VersesFields

//region VersesManager
class VersesManager extends SqfEntityProvider {
  VersesManager()
      : super(BibleGameModel(), tableName: _tableName, colId: _colId);
  static String _tableName = 'verses';
  static String _colId = 'id';
}

//endregion VersesManager
/// Region SEQUENCE IdentitySequence
class IdentitySequence {
  /// Assigns a new value when it is triggered and returns the new value
  /// returns Future<int>
  Future<int> nextVal([VoidCallback nextval(int o)]) async {
    final val = await BibleGameModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, true);
    if (nextval != null) {
      nextval(val);
    }
    return val;
  }

  /// Get the current value
  /// returns Future<int>
  Future<int> currentVal([VoidCallback currentval(int o)]) async {
    final val = await BibleGameModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }

  /// Reset sequence to start value
  /// returns start value
  Future<int> reset([VoidCallback currentval(int o)]) async {
    final val = await BibleGameModelSequenceManager()
        .sequence(SequenceIdentitySequence.getInstance, false, reset: true);
    if (currentval != null) {
      currentval(val);
    }
    return val;
  }
}

/// End Region SEQUENCE IdentitySequence

class BibleGameModelSequenceManager extends SqfEntityProvider {
  BibleGameModelSequenceManager() : super(BibleGameModel());
}
// END OF ENTITIES
